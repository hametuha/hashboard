{"version":3,"sources":["components/post-list.js"],"names":["$","Vue","component","template","data","loading","posts","props","title","type","String","default","postType","moreButton","moreLabel","new","max","author","mounted","this","fetch","console","log","isNew","computed","methods","date","timezone","arguments","length","undefined","days","parseInt","isNaN","limit","moment","subtract","toDate","compare","number","key","self","query","per_page","hbRest","done","res","fail","hbRestError","always","$emit","jQuery"],"mappings":"AAAA;;;;;CASA,SAAWA,GAKTC,IAAIC,UAAU,gBACZC,SAAAA,6xBAgBAC,KAAM,WACJ,OACEC,SAAS,EACTC,WAGJC,OACEC,OACEC,KAAMC,OACNC,UAAS,IAEXC,UACEH,KAAMC,OACNC,UAAS,QAEXE,YACEJ,KAAMC,OACNC,UAAS,IAEXG,WACEL,KAAMC,OACNC,UAAS,aAEXI,OACEN,KAAMC,OACNC,UAAS,KAEXK,KACEP,KAAMC,OACNC,UAAS,KAEXM,QACER,KAAMC,OACNC,UAAS,MAGbO,QAAS,WACPC,KAAKC,QACLC,QAAQC,IAAIH,KAAKI,MAAM,sBAAuB,MAGhDC,YAGAC,SASEF,MAAO,SAASG,GAAmB,GAAbC,GAAaC,UAAAC,OAAA,GAAAC,SAAAF,UAAA,GAAAA,UAAA,GAAJ,IACvBG,EAAOC,SAASb,KAAAA,OAAU,GAChC,IAAGc,MAAMF,IAASA,EAAO,EACvB,OAAO,CAET,IAAMG,GAAQC,SAASC,SAASL,EAAM,QAAQM,SACxCC,EAAUH,OAAOT,EAAKC,GAAUU,QACtC,OAAOC,GAAUJ,GAGnBK,OAAQ,SAAUC,GAChB,MAAI,WAAarB,KAAKqB,GACbrB,KAAKqB,GAELR,SAASb,KAAKqB,GAAM,KAG/BpB,MAAO,WACL,GAAIqB,GAAOtB,IACXA,MAAKd,SAAU,CACf,IAAIqC,IACFC,SAAUxB,KAAKoB,OAAO,QAEpBtB,EAASE,KAAKoB,OAAO,SACtBtB,KACDyB,EAAM,YAAczB,GAGtBjB,EAAE4C,OAAO,MAAO,SAAWzB,KAAKP,SAAU8B,GAAOG,KAAK,SAACC,GACrDL,EAAKnC,MAAQwC,IACZC,KAAK/C,EAAEgD,eAAeC,OAAO,WAC9BR,EAAKS,MAAM,qBACXT,EAAKpC,SAAU,SAQtB8C","file":"../../components/post-list.js","sourcesContent":["/*!\n * List of posts.\n *\n * wpdeps=vue-js,hb-components-loading,hashboard, hb-filters-moment\n */\n\n/*global moment: false*/\n/*global Vue: false*/\n\n(function ($) {\n\n  'use strict';\n\n\n  Vue.component('hb-post-list', {\n    template: `\n      <div class=\"hb-post-list\">\n        <p class=\"hb-post-list-title\" v-if=\"title\">{{title}}</p>\n        <ul class=\"hb-post-list-list\" v-if=\"posts\">\n            <li v-for=\"post in posts\" class=\"hb-post-list-item\">\n                <a :href=\"post.link\" class=\"hb-post-list-link\">\n                    <span class=\"hb-post-list-title\">{{post.title.rendered}}</span>\n                    <span class=\"hb-post-list-date\">{{post.date | moment('ll')}}</span>\n                    <span v-if=\"isNew(post.date_gmt, 'Z')\" class=\"hb-post-list-new material-icons\">fiber_new</span>\n                </a>\n            </li>\n        </ul>\n        <a :href=\"moreButton\" class=\"btn btn-block btn-secondary\">{{moreLabel}}</a>\n        <hb-loading :loading=\"loading\"></hb-loading>\n      </div>\n    `,\n    data: function(){\n      return {\n        loading: true,\n        posts: [],\n      };\n    },\n    props: {\n      title: {\n        type: String,\n        default: ''\n      },\n      postType: {\n        type: String,\n        default: 'post'\n      },\n      moreButton: {\n        type: String,\n        default: ''\n      },\n      moreLabel: {\n        type: String,\n        default: 'READ MORE'\n      },\n      new: {\n        type: String,\n        default: \"0\"\n      },\n      max: {\n        type: String,\n        default: \"3\"\n      },\n      author: {\n        type: String,\n        default: '0'\n      }\n    },\n    mounted: function(){\n      this.fetch();\n      console.log(this.isNew('2017-08-16T19:00:00', ''));\n    },\n\n    computed: {\n    },\n\n    methods: {\n\n      /**\n       * Check if date is new.\n       *\n       * @param {String} date\n       * @param {String} timezone\n       * @returns {boolean}\n       */\n      isNew: function(date, timezone='Z'){\n        const days = parseInt(this.new, 10);\n        if(isNaN(days) || days < 1){\n          return false;\n        }\n        const limit = moment().subtract(days, 'days').toDate();\n        const compare = moment(date+timezone).toDate();\n        return compare > limit;\n      },\n\n      number: function( key ){\n        if( 'Number' === this[key] ){\n          return this[key];\n        }else{\n          return parseInt(this[key], 10);\n        }\n      },\n      fetch: function(){\n        let self = this;\n        this.loading = true;\n        let query = {\n          per_page: this.number('max'),\n        };\n        let author = this.number('author');\n        if(author){\n          query['author[]'] = author;\n        }\n\n        $.hbRest('GET', 'wp/v2/' + this.postType, query).done((res)=>{\n          self.posts = res;\n        }).fail($.hbRestError()).always(()=>{\n          self.$emit('post-list-updated');\n          self.loading = false;\n        });\n      },\n    }\n  } );\n\n\n\n})(jQuery);\n"]}